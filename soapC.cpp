/* soapC.cpp
   Generated by gSOAP 2.7.10 from captureGSOAP.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.10 2008-08-26 03:24:29 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_ns__receiveEventsBase64:
		return soap_in_ns__receiveEventsBase64(soap, NULL, NULL, "ns:receiveEventsBase64");
	case SOAP_TYPE_ns__openDocument:
		return soap_in_ns__openDocument(soap, NULL, NULL, "ns:openDocument");
	case SOAP_TYPE_ns__openDocumentResponse:
		return soap_in_ns__openDocumentResponse(soap, NULL, NULL, "ns:openDocumentResponse");
	case SOAP_TYPE_ns__sendMIME:
		return soap_in_ns__sendMIME(soap, NULL, NULL, "ns:sendMIME");
	case SOAP_TYPE_ns__sendMIMEResponse:
		return soap_in_ns__sendMIMEResponse(soap, NULL, NULL, "ns:sendMIMEResponse");
	case SOAP_TYPE_ns__receiveFileBase64:
		return soap_in_ns__receiveFileBase64(soap, NULL, NULL, "ns:receiveFileBase64");
	case SOAP_TYPE_ns__sendFileBase64:
		return soap_in_ns__sendFileBase64(soap, NULL, NULL, "ns:sendFileBase64");
	case SOAP_TYPE_ns__sendFileBase64Response:
		return soap_in_ns__sendFileBase64Response(soap, NULL, NULL, "ns:sendFileBase64Response");
	case SOAP_TYPE_ns__visitURL:
		return soap_in_ns__visitURL(soap, NULL, NULL, "ns:visitURL");
	case SOAP_TYPE_ns__visitURLResponse:
		return soap_in_ns__visitURLResponse(soap, NULL, NULL, "ns:visitURLResponse");
	case SOAP_TYPE_ns__ping:
		return soap_in_ns__ping(soap, NULL, NULL, "ns:ping");
	case SOAP_TYPE_ns__pingResponse:
		return soap_in_ns__pingResponse(soap, NULL, NULL, "ns:pingResponse");
	case SOAP_TYPE_ns__receiveEventsStruct:
		return soap_in_ns__receiveEventsStruct(soap, NULL, NULL, "ns:receiveEventsStruct");
	case SOAP_TYPE_s2:
		return soap_in_s2(soap, NULL, NULL, "s2");
	case SOAP_TYPE_ns__receiveFileStruct:
		return soap_in_ns__receiveFileStruct(soap, NULL, NULL, "ns:receiveFileStruct");
	case SOAP_TYPE_s1:
		return soap_in_s1(soap, NULL, NULL, "s1");
	case SOAP_TYPE_ns__procEvent_t:
		return soap_in_ns__procEvent_t(soap, NULL, NULL, "ns:procEvent-t");
	case SOAP_TYPE_ns__procEvent:
		return soap_in_ns__procEvent(soap, NULL, NULL, "ns:procEvent");
	case SOAP_TYPE_ns__fileEvent:
		return soap_in_ns__fileEvent(soap, NULL, NULL, "ns:fileEvent");
	case SOAP_TYPE_ns__regEvent:
		return soap_in_ns__regEvent(soap, NULL, NULL, "ns:regEvent");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:receiveEventsBase64"))
		{	*type = SOAP_TYPE_ns__receiveEventsBase64;
			return soap_in_ns__receiveEventsBase64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:openDocument"))
		{	*type = SOAP_TYPE_ns__openDocument;
			return soap_in_ns__openDocument(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:openDocumentResponse"))
		{	*type = SOAP_TYPE_ns__openDocumentResponse;
			return soap_in_ns__openDocumentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sendMIME"))
		{	*type = SOAP_TYPE_ns__sendMIME;
			return soap_in_ns__sendMIME(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sendMIMEResponse"))
		{	*type = SOAP_TYPE_ns__sendMIMEResponse;
			return soap_in_ns__sendMIMEResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:receiveFileBase64"))
		{	*type = SOAP_TYPE_ns__receiveFileBase64;
			return soap_in_ns__receiveFileBase64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sendFileBase64"))
		{	*type = SOAP_TYPE_ns__sendFileBase64;
			return soap_in_ns__sendFileBase64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sendFileBase64Response"))
		{	*type = SOAP_TYPE_ns__sendFileBase64Response;
			return soap_in_ns__sendFileBase64Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:visitURL"))
		{	*type = SOAP_TYPE_ns__visitURL;
			return soap_in_ns__visitURL(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:visitURLResponse"))
		{	*type = SOAP_TYPE_ns__visitURLResponse;
			return soap_in_ns__visitURLResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ping"))
		{	*type = SOAP_TYPE_ns__ping;
			return soap_in_ns__ping(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:pingResponse"))
		{	*type = SOAP_TYPE_ns__pingResponse;
			return soap_in_ns__pingResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:receiveEventsStruct"))
		{	*type = SOAP_TYPE_ns__receiveEventsStruct;
			return soap_in_ns__receiveEventsStruct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "s2"))
		{	*type = SOAP_TYPE_s2;
			return soap_in_s2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:receiveFileStruct"))
		{	*type = SOAP_TYPE_ns__receiveFileStruct;
			return soap_in_ns__receiveFileStruct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "s1"))
		{	*type = SOAP_TYPE_s1;
			return soap_in_s1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:procEvent-t"))
		{	*type = SOAP_TYPE_ns__procEvent_t;
			return soap_in_ns__procEvent_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:procEvent"))
		{	*type = SOAP_TYPE_ns__procEvent;
			return soap_in_ns__procEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:fileEvent"))
		{	*type = SOAP_TYPE_ns__fileEvent;
			return soap_in_ns__fileEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:regEvent"))
		{	*type = SOAP_TYPE_ns__regEvent;
			return soap_in_ns__regEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_ns__receiveEventsBase64:
		return soap_out_ns__receiveEventsBase64(soap, tag, id, (const struct ns__receiveEventsBase64 *)ptr, "ns:receiveEventsBase64");
	case SOAP_TYPE_ns__openDocument:
		return soap_out_ns__openDocument(soap, tag, id, (const struct ns__openDocument *)ptr, "ns:openDocument");
	case SOAP_TYPE_ns__openDocumentResponse:
		return soap_out_ns__openDocumentResponse(soap, tag, id, (const struct ns__openDocumentResponse *)ptr, "ns:openDocumentResponse");
	case SOAP_TYPE_ns__sendMIME:
		return soap_out_ns__sendMIME(soap, tag, id, (const struct ns__sendMIME *)ptr, "ns:sendMIME");
	case SOAP_TYPE_ns__sendMIMEResponse:
		return soap_out_ns__sendMIMEResponse(soap, tag, id, (const struct ns__sendMIMEResponse *)ptr, "ns:sendMIMEResponse");
	case SOAP_TYPE_ns__receiveFileBase64:
		return soap_out_ns__receiveFileBase64(soap, tag, id, (const struct ns__receiveFileBase64 *)ptr, "ns:receiveFileBase64");
	case SOAP_TYPE_ns__sendFileBase64:
		return soap_out_ns__sendFileBase64(soap, tag, id, (const struct ns__sendFileBase64 *)ptr, "ns:sendFileBase64");
	case SOAP_TYPE_ns__sendFileBase64Response:
		return soap_out_ns__sendFileBase64Response(soap, tag, id, (const struct ns__sendFileBase64Response *)ptr, "ns:sendFileBase64Response");
	case SOAP_TYPE_ns__visitURL:
		return soap_out_ns__visitURL(soap, tag, id, (const struct ns__visitURL *)ptr, "ns:visitURL");
	case SOAP_TYPE_ns__visitURLResponse:
		return soap_out_ns__visitURLResponse(soap, tag, id, (const struct ns__visitURLResponse *)ptr, "ns:visitURLResponse");
	case SOAP_TYPE_ns__ping:
		return soap_out_ns__ping(soap, tag, id, (const struct ns__ping *)ptr, "ns:ping");
	case SOAP_TYPE_ns__pingResponse:
		return soap_out_ns__pingResponse(soap, tag, id, (const struct ns__pingResponse *)ptr, "ns:pingResponse");
	case SOAP_TYPE_ns__receiveEventsStruct:
		return soap_out_ns__receiveEventsStruct(soap, tag, id, (const struct s2 *)ptr, "ns:receiveEventsStruct");
	case SOAP_TYPE_s2:
		return soap_out_s2(soap, tag, id, (const struct s2 *)ptr, "s2");
	case SOAP_TYPE_ns__receiveFileStruct:
		return soap_out_ns__receiveFileStruct(soap, tag, id, (const struct s1 *)ptr, "ns:receiveFileStruct");
	case SOAP_TYPE_s1:
		return soap_out_s1(soap, tag, id, (const struct s1 *)ptr, "s1");
	case SOAP_TYPE_ns__procEvent_t:
		return soap_out_ns__procEvent_t(soap, tag, id, (const struct ns__procEvent *)ptr, "ns:procEvent-t");
	case SOAP_TYPE_ns__procEvent:
		return soap_out_ns__procEvent(soap, tag, id, (const struct ns__procEvent *)ptr, "ns:procEvent");
	case SOAP_TYPE_ns__fileEvent:
		return soap_out_ns__fileEvent(soap, tag, id, (const struct ns__fileEvent *)ptr, "ns:fileEvent");
	case SOAP_TYPE_ns__regEvent:
		return soap_out_ns__regEvent(soap, tag, id, (const struct ns__regEvent *)ptr, "ns:regEvent");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__receiveEventsBase64:
		soap_serialize_ns__receiveEventsBase64(soap, (const struct ns__receiveEventsBase64 *)ptr);
		break;
	case SOAP_TYPE_ns__openDocument:
		soap_serialize_ns__openDocument(soap, (const struct ns__openDocument *)ptr);
		break;
	case SOAP_TYPE_ns__openDocumentResponse:
		soap_serialize_ns__openDocumentResponse(soap, (const struct ns__openDocumentResponse *)ptr);
		break;
	case SOAP_TYPE_ns__sendMIME:
		soap_serialize_ns__sendMIME(soap, (const struct ns__sendMIME *)ptr);
		break;
	case SOAP_TYPE_ns__sendMIMEResponse:
		soap_serialize_ns__sendMIMEResponse(soap, (const struct ns__sendMIMEResponse *)ptr);
		break;
	case SOAP_TYPE_ns__receiveFileBase64:
		soap_serialize_ns__receiveFileBase64(soap, (const struct ns__receiveFileBase64 *)ptr);
		break;
	case SOAP_TYPE_ns__sendFileBase64:
		soap_serialize_ns__sendFileBase64(soap, (const struct ns__sendFileBase64 *)ptr);
		break;
	case SOAP_TYPE_ns__sendFileBase64Response:
		soap_serialize_ns__sendFileBase64Response(soap, (const struct ns__sendFileBase64Response *)ptr);
		break;
	case SOAP_TYPE_ns__visitURL:
		soap_serialize_ns__visitURL(soap, (const struct ns__visitURL *)ptr);
		break;
	case SOAP_TYPE_ns__visitURLResponse:
		soap_serialize_ns__visitURLResponse(soap, (const struct ns__visitURLResponse *)ptr);
		break;
	case SOAP_TYPE_ns__ping:
		soap_serialize_ns__ping(soap, (const struct ns__ping *)ptr);
		break;
	case SOAP_TYPE_ns__pingResponse:
		soap_serialize_ns__pingResponse(soap, (const struct ns__pingResponse *)ptr);
		break;
	case SOAP_TYPE_ns__receiveEventsStruct:
		soap_serialize_ns__receiveEventsStruct(soap, (const struct s2 *)ptr);
		break;
	case SOAP_TYPE_s2:
		soap_serialize_s2(soap, (const struct s2 *)ptr);
		break;
	case SOAP_TYPE_ns__receiveFileStruct:
		soap_serialize_ns__receiveFileStruct(soap, (const struct s1 *)ptr);
		break;
	case SOAP_TYPE_s1:
		soap_serialize_s1(soap, (const struct s1 *)ptr);
		break;
	case SOAP_TYPE_ns__procEvent_t:
		soap_serialize_ns__procEvent_t(soap, (const struct ns__procEvent *)ptr);
		break;
	case SOAP_TYPE_ns__procEvent:
		soap_serialize_ns__procEvent(soap, (const struct ns__procEvent *)ptr);
		break;
	case SOAP_TYPE_ns__fileEvent:
		soap_serialize_ns__fileEvent(soap, (const struct ns__fileEvent *)ptr);
		break;
	case SOAP_TYPE_ns__regEvent:
		soap_serialize_ns__regEvent(soap, (const struct ns__regEvent *)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_ns__regEvent:
		return (void*)soap_instantiate_ns__regEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__fileEvent:
		return (void*)soap_instantiate_ns__fileEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__procEvent:
		return (void*)soap_instantiate_ns__procEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_s1:
		return (void*)soap_instantiate_s1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_s2:
		return (void*)soap_instantiate_s2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__pingResponse:
		return (void*)soap_instantiate_ns__pingResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ping:
		return (void*)soap_instantiate_ns__ping(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__visitURLResponse:
		return (void*)soap_instantiate_ns__visitURLResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__visitURL:
		return (void*)soap_instantiate_ns__visitURL(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sendFileBase64Response:
		return (void*)soap_instantiate_ns__sendFileBase64Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sendFileBase64:
		return (void*)soap_instantiate_ns__sendFileBase64(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__receiveFileBase64:
		return (void*)soap_instantiate_ns__receiveFileBase64(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sendMIMEResponse:
		return (void*)soap_instantiate_ns__sendMIMEResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sendMIME:
		return (void*)soap_instantiate_ns__sendMIME(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__openDocumentResponse:
		return (void*)soap_instantiate_ns__openDocumentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__openDocument:
		return (void*)soap_instantiate_ns__openDocument(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__receiveEventsBase64:
		return (void*)soap_instantiate_ns__receiveEventsBase64(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_ns__procEvent_t:
		return (void*)soap_instantiate_ns__procEvent_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__receiveFileStruct:
		return (void*)soap_instantiate_ns__receiveFileStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__receiveEventsStruct:
		return (void*)soap_instantiate_ns__receiveEventsStruct(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns__regEvent:
		if (p->size < 0)
			delete (struct ns__regEvent*)p->ptr;
		else
			delete[] (struct ns__regEvent*)p->ptr;
		break;
	case SOAP_TYPE_ns__fileEvent:
		if (p->size < 0)
			delete (struct ns__fileEvent*)p->ptr;
		else
			delete[] (struct ns__fileEvent*)p->ptr;
		break;
	case SOAP_TYPE_ns__procEvent:
		if (p->size < 0)
			delete (struct ns__procEvent*)p->ptr;
		else
			delete[] (struct ns__procEvent*)p->ptr;
		break;
	case SOAP_TYPE_s1:
		if (p->size < 0)
			delete (struct s1*)p->ptr;
		else
			delete[] (struct s1*)p->ptr;
		break;
	case SOAP_TYPE_s2:
		if (p->size < 0)
			delete (struct s2*)p->ptr;
		else
			delete[] (struct s2*)p->ptr;
		break;
	case SOAP_TYPE_ns__pingResponse:
		if (p->size < 0)
			delete (struct ns__pingResponse*)p->ptr;
		else
			delete[] (struct ns__pingResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__ping:
		if (p->size < 0)
			delete (struct ns__ping*)p->ptr;
		else
			delete[] (struct ns__ping*)p->ptr;
		break;
	case SOAP_TYPE_ns__visitURLResponse:
		if (p->size < 0)
			delete (struct ns__visitURLResponse*)p->ptr;
		else
			delete[] (struct ns__visitURLResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__visitURL:
		if (p->size < 0)
			delete (struct ns__visitURL*)p->ptr;
		else
			delete[] (struct ns__visitURL*)p->ptr;
		break;
	case SOAP_TYPE_ns__sendFileBase64Response:
		if (p->size < 0)
			delete (struct ns__sendFileBase64Response*)p->ptr;
		else
			delete[] (struct ns__sendFileBase64Response*)p->ptr;
		break;
	case SOAP_TYPE_ns__sendFileBase64:
		if (p->size < 0)
			delete (struct ns__sendFileBase64*)p->ptr;
		else
			delete[] (struct ns__sendFileBase64*)p->ptr;
		break;
	case SOAP_TYPE_ns__receiveFileBase64:
		if (p->size < 0)
			delete (struct ns__receiveFileBase64*)p->ptr;
		else
			delete[] (struct ns__receiveFileBase64*)p->ptr;
		break;
	case SOAP_TYPE_ns__sendMIMEResponse:
		if (p->size < 0)
			delete (struct ns__sendMIMEResponse*)p->ptr;
		else
			delete[] (struct ns__sendMIMEResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__sendMIME:
		if (p->size < 0)
			delete (struct ns__sendMIME*)p->ptr;
		else
			delete[] (struct ns__sendMIME*)p->ptr;
		break;
	case SOAP_TYPE_ns__openDocumentResponse:
		if (p->size < 0)
			delete (struct ns__openDocumentResponse*)p->ptr;
		else
			delete[] (struct ns__openDocumentResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__openDocument:
		if (p->size < 0)
			delete (struct ns__openDocument*)p->ptr;
		else
			delete[] (struct ns__openDocument*)p->ptr;
		break;
	case SOAP_TYPE_ns__receiveEventsBase64:
		if (p->size < 0)
			delete (struct ns__receiveEventsBase64*)p->ptr;
		else
			delete[] (struct ns__receiveEventsBase64*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_ns__procEvent_t:
		if (p->size < 0)
			delete (struct ns__procEvent*)p->ptr;
		else
			delete[] (struct ns__procEvent*)p->ptr;
		break;
	case SOAP_TYPE_ns__receiveFileStruct:
		if (p->size < 0)
			delete (struct s1*)p->ptr;
		else
			delete[] (struct s1*)p->ptr;
		break;
	case SOAP_TYPE_ns__receiveEventsStruct:
		if (p->size < 0)
			delete (struct s2*)p->ptr;
		else
			delete[] (struct s2*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__receiveEventsBase64(struct soap *soap, struct ns__receiveEventsBase64 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->maxEventsReturned);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__receiveEventsBase64(struct soap *soap, const struct ns__receiveEventsBase64 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__receiveEventsBase64(struct soap *soap, const struct ns__receiveEventsBase64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__receiveEventsBase64);
	if (soap_out_ns__receiveEventsBase64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__receiveEventsBase64(struct soap *soap, const char *tag, int id, const struct ns__receiveEventsBase64 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__receiveEventsBase64), type))
		return soap->error;
	if (soap_out_int(soap, "maxEventsReturned", -1, &a->maxEventsReturned, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__receiveEventsBase64 * SOAP_FMAC4 soap_get_ns__receiveEventsBase64(struct soap *soap, struct ns__receiveEventsBase64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__receiveEventsBase64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__receiveEventsBase64 * SOAP_FMAC4 soap_in_ns__receiveEventsBase64(struct soap *soap, const char *tag, struct ns__receiveEventsBase64 *a, const char *type)
{
	short soap_flag_maxEventsReturned = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__receiveEventsBase64 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__receiveEventsBase64, sizeof(struct ns__receiveEventsBase64), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__receiveEventsBase64(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_maxEventsReturned && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxEventsReturned", &a->maxEventsReturned, "xsd:int"))
				{	soap_flag_maxEventsReturned--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__receiveEventsBase64 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__receiveEventsBase64, 0, sizeof(struct ns__receiveEventsBase64), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_maxEventsReturned > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__receiveEventsBase64 * SOAP_FMAC6 soap_new_ns__receiveEventsBase64(struct soap *soap, int n)
{	return soap_instantiate_ns__receiveEventsBase64(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__receiveEventsBase64(struct soap *soap, struct ns__receiveEventsBase64 *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__receiveEventsBase64 * SOAP_FMAC4 soap_instantiate_ns__receiveEventsBase64(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__receiveEventsBase64(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__receiveEventsBase64, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__receiveEventsBase64;
		if (size)
			*size = sizeof(struct ns__receiveEventsBase64);
	}
	else
	{	cp->ptr = (void*)new struct ns__receiveEventsBase64[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__receiveEventsBase64);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__receiveEventsBase64*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__receiveEventsBase64(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__receiveEventsBase64 %p -> %p\n", q, p));
	*(struct ns__receiveEventsBase64*)p = *(struct ns__receiveEventsBase64*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__openDocument(struct soap *soap, struct ns__openDocument *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->fileName);
	soap_default_int(soap, &a->waitTimeMillisec);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__openDocument(struct soap *soap, const struct ns__openDocument *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->fileName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__openDocument(struct soap *soap, const struct ns__openDocument *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__openDocument);
	if (soap_out_ns__openDocument(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__openDocument(struct soap *soap, const char *tag, int id, const struct ns__openDocument *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__openDocument), type))
		return soap->error;
	if (soap_out_string(soap, "fileName", -1, &a->fileName, ""))
		return soap->error;
	if (soap_out_int(soap, "waitTimeMillisec", -1, &a->waitTimeMillisec, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__openDocument * SOAP_FMAC4 soap_get_ns__openDocument(struct soap *soap, struct ns__openDocument *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__openDocument(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__openDocument * SOAP_FMAC4 soap_in_ns__openDocument(struct soap *soap, const char *tag, struct ns__openDocument *a, const char *type)
{
	short soap_flag_fileName = 1, soap_flag_waitTimeMillisec = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__openDocument *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__openDocument, sizeof(struct ns__openDocument), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__openDocument(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "fileName", &a->fileName, "xsd:string"))
				{	soap_flag_fileName--;
					continue;
				}
			if (soap_flag_waitTimeMillisec && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "waitTimeMillisec", &a->waitTimeMillisec, "xsd:int"))
				{	soap_flag_waitTimeMillisec--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__openDocument *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__openDocument, 0, sizeof(struct ns__openDocument), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_waitTimeMillisec > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__openDocument * SOAP_FMAC6 soap_new_ns__openDocument(struct soap *soap, int n)
{	return soap_instantiate_ns__openDocument(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__openDocument(struct soap *soap, struct ns__openDocument *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__openDocument * SOAP_FMAC4 soap_instantiate_ns__openDocument(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__openDocument(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__openDocument, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__openDocument;
		if (size)
			*size = sizeof(struct ns__openDocument);
	}
	else
	{	cp->ptr = (void*)new struct ns__openDocument[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__openDocument);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__openDocument*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__openDocument(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__openDocument %p -> %p\n", q, p));
	*(struct ns__openDocument*)p = *(struct ns__openDocument*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__openDocumentResponse(struct soap *soap, struct ns__openDocumentResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__openDocumentResponse(struct soap *soap, const struct ns__openDocumentResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__openDocumentResponse(struct soap *soap, const struct ns__openDocumentResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__openDocumentResponse);
	if (soap_out_ns__openDocumentResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__openDocumentResponse(struct soap *soap, const char *tag, int id, const struct ns__openDocumentResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__openDocumentResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__openDocumentResponse * SOAP_FMAC4 soap_get_ns__openDocumentResponse(struct soap *soap, struct ns__openDocumentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__openDocumentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__openDocumentResponse * SOAP_FMAC4 soap_in_ns__openDocumentResponse(struct soap *soap, const char *tag, struct ns__openDocumentResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__openDocumentResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__openDocumentResponse, sizeof(struct ns__openDocumentResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__openDocumentResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__openDocumentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__openDocumentResponse, 0, sizeof(struct ns__openDocumentResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__openDocumentResponse * SOAP_FMAC6 soap_new_ns__openDocumentResponse(struct soap *soap, int n)
{	return soap_instantiate_ns__openDocumentResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__openDocumentResponse(struct soap *soap, struct ns__openDocumentResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__openDocumentResponse * SOAP_FMAC4 soap_instantiate_ns__openDocumentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__openDocumentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__openDocumentResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__openDocumentResponse;
		if (size)
			*size = sizeof(struct ns__openDocumentResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns__openDocumentResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__openDocumentResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__openDocumentResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__openDocumentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__openDocumentResponse %p -> %p\n", q, p));
	*(struct ns__openDocumentResponse*)p = *(struct ns__openDocumentResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sendMIME(struct soap *soap, struct ns__sendMIME *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->magicNumber);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sendMIME(struct soap *soap, const struct ns__sendMIME *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sendMIME(struct soap *soap, const struct ns__sendMIME *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sendMIME);
	if (soap_out_ns__sendMIME(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sendMIME(struct soap *soap, const char *tag, int id, const struct ns__sendMIME *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sendMIME), type))
		return soap->error;
	if (soap_out_int(soap, "magicNumber", -1, &a->magicNumber, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sendMIME * SOAP_FMAC4 soap_get_ns__sendMIME(struct soap *soap, struct ns__sendMIME *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sendMIME(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__sendMIME * SOAP_FMAC4 soap_in_ns__sendMIME(struct soap *soap, const char *tag, struct ns__sendMIME *a, const char *type)
{
	short soap_flag_magicNumber = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sendMIME *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sendMIME, sizeof(struct ns__sendMIME), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__sendMIME(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_magicNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "magicNumber", &a->magicNumber, "xsd:int"))
				{	soap_flag_magicNumber--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sendMIME *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sendMIME, 0, sizeof(struct ns__sendMIME), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_magicNumber > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__sendMIME * SOAP_FMAC6 soap_new_ns__sendMIME(struct soap *soap, int n)
{	return soap_instantiate_ns__sendMIME(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__sendMIME(struct soap *soap, struct ns__sendMIME *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__sendMIME * SOAP_FMAC4 soap_instantiate_ns__sendMIME(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sendMIME(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sendMIME, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__sendMIME;
		if (size)
			*size = sizeof(struct ns__sendMIME);
	}
	else
	{	cp->ptr = (void*)new struct ns__sendMIME[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sendMIME);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sendMIME*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sendMIME(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sendMIME %p -> %p\n", q, p));
	*(struct ns__sendMIME*)p = *(struct ns__sendMIME*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sendMIMEResponse(struct soap *soap, struct ns__sendMIMEResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sendMIMEResponse(struct soap *soap, const struct ns__sendMIMEResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sendMIMEResponse(struct soap *soap, const struct ns__sendMIMEResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sendMIMEResponse);
	if (soap_out_ns__sendMIMEResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sendMIMEResponse(struct soap *soap, const char *tag, int id, const struct ns__sendMIMEResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sendMIMEResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sendMIMEResponse * SOAP_FMAC4 soap_get_ns__sendMIMEResponse(struct soap *soap, struct ns__sendMIMEResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sendMIMEResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__sendMIMEResponse * SOAP_FMAC4 soap_in_ns__sendMIMEResponse(struct soap *soap, const char *tag, struct ns__sendMIMEResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sendMIMEResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sendMIMEResponse, sizeof(struct ns__sendMIMEResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__sendMIMEResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sendMIMEResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sendMIMEResponse, 0, sizeof(struct ns__sendMIMEResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__sendMIMEResponse * SOAP_FMAC6 soap_new_ns__sendMIMEResponse(struct soap *soap, int n)
{	return soap_instantiate_ns__sendMIMEResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__sendMIMEResponse(struct soap *soap, struct ns__sendMIMEResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__sendMIMEResponse * SOAP_FMAC4 soap_instantiate_ns__sendMIMEResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sendMIMEResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sendMIMEResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__sendMIMEResponse;
		if (size)
			*size = sizeof(struct ns__sendMIMEResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns__sendMIMEResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sendMIMEResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sendMIMEResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sendMIMEResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sendMIMEResponse %p -> %p\n", q, p));
	*(struct ns__sendMIMEResponse*)p = *(struct ns__sendMIMEResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__receiveFileBase64(struct soap *soap, struct ns__receiveFileBase64 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->fileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__receiveFileBase64(struct soap *soap, const struct ns__receiveFileBase64 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->fileName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__receiveFileBase64(struct soap *soap, const struct ns__receiveFileBase64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__receiveFileBase64);
	if (soap_out_ns__receiveFileBase64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__receiveFileBase64(struct soap *soap, const char *tag, int id, const struct ns__receiveFileBase64 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__receiveFileBase64), type))
		return soap->error;
	if (soap_out_string(soap, "fileName", -1, &a->fileName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__receiveFileBase64 * SOAP_FMAC4 soap_get_ns__receiveFileBase64(struct soap *soap, struct ns__receiveFileBase64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__receiveFileBase64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__receiveFileBase64 * SOAP_FMAC4 soap_in_ns__receiveFileBase64(struct soap *soap, const char *tag, struct ns__receiveFileBase64 *a, const char *type)
{
	short soap_flag_fileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__receiveFileBase64 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__receiveFileBase64, sizeof(struct ns__receiveFileBase64), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__receiveFileBase64(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "fileName", &a->fileName, "xsd:string"))
				{	soap_flag_fileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__receiveFileBase64 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__receiveFileBase64, 0, sizeof(struct ns__receiveFileBase64), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__receiveFileBase64 * SOAP_FMAC6 soap_new_ns__receiveFileBase64(struct soap *soap, int n)
{	return soap_instantiate_ns__receiveFileBase64(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__receiveFileBase64(struct soap *soap, struct ns__receiveFileBase64 *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__receiveFileBase64 * SOAP_FMAC4 soap_instantiate_ns__receiveFileBase64(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__receiveFileBase64(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__receiveFileBase64, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__receiveFileBase64;
		if (size)
			*size = sizeof(struct ns__receiveFileBase64);
	}
	else
	{	cp->ptr = (void*)new struct ns__receiveFileBase64[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__receiveFileBase64);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__receiveFileBase64*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__receiveFileBase64(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__receiveFileBase64 %p -> %p\n", q, p));
	*(struct ns__receiveFileBase64*)p = *(struct ns__receiveFileBase64*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sendFileBase64(struct soap *soap, struct ns__sendFileBase64 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->fileName);
	soap_default_string(soap, &a->data);
	soap_default_unsignedInt(soap, &a->encodedLength);
	soap_default_unsignedInt(soap, &a->decodedLength);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sendFileBase64(struct soap *soap, const struct ns__sendFileBase64 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->fileName);
	soap_serialize_string(soap, &a->data);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sendFileBase64(struct soap *soap, const struct ns__sendFileBase64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sendFileBase64);
	if (soap_out_ns__sendFileBase64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sendFileBase64(struct soap *soap, const char *tag, int id, const struct ns__sendFileBase64 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sendFileBase64), type))
		return soap->error;
	if (soap_out_string(soap, "fileName", -1, &a->fileName, ""))
		return soap->error;
	if (soap_out_string(soap, "data", -1, &a->data, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "encodedLength", -1, &a->encodedLength, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "decodedLength", -1, &a->decodedLength, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sendFileBase64 * SOAP_FMAC4 soap_get_ns__sendFileBase64(struct soap *soap, struct ns__sendFileBase64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sendFileBase64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__sendFileBase64 * SOAP_FMAC4 soap_in_ns__sendFileBase64(struct soap *soap, const char *tag, struct ns__sendFileBase64 *a, const char *type)
{
	short soap_flag_fileName = 1, soap_flag_data = 1, soap_flag_encodedLength = 1, soap_flag_decodedLength = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sendFileBase64 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sendFileBase64, sizeof(struct ns__sendFileBase64), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__sendFileBase64(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "fileName", &a->fileName, "xsd:string"))
				{	soap_flag_fileName--;
					continue;
				}
			if (soap_flag_data && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "data", &a->data, "xsd:string"))
				{	soap_flag_data--;
					continue;
				}
			if (soap_flag_encodedLength && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "encodedLength", &a->encodedLength, "xsd:unsignedInt"))
				{	soap_flag_encodedLength--;
					continue;
				}
			if (soap_flag_decodedLength && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "decodedLength", &a->decodedLength, "xsd:unsignedInt"))
				{	soap_flag_decodedLength--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sendFileBase64 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sendFileBase64, 0, sizeof(struct ns__sendFileBase64), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_encodedLength > 0 || soap_flag_decodedLength > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__sendFileBase64 * SOAP_FMAC6 soap_new_ns__sendFileBase64(struct soap *soap, int n)
{	return soap_instantiate_ns__sendFileBase64(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__sendFileBase64(struct soap *soap, struct ns__sendFileBase64 *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__sendFileBase64 * SOAP_FMAC4 soap_instantiate_ns__sendFileBase64(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sendFileBase64(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sendFileBase64, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__sendFileBase64;
		if (size)
			*size = sizeof(struct ns__sendFileBase64);
	}
	else
	{	cp->ptr = (void*)new struct ns__sendFileBase64[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sendFileBase64);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sendFileBase64*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sendFileBase64(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sendFileBase64 %p -> %p\n", q, p));
	*(struct ns__sendFileBase64*)p = *(struct ns__sendFileBase64*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sendFileBase64Response(struct soap *soap, struct ns__sendFileBase64Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sendFileBase64Response(struct soap *soap, const struct ns__sendFileBase64Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sendFileBase64Response(struct soap *soap, const struct ns__sendFileBase64Response *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sendFileBase64Response);
	if (soap_out_ns__sendFileBase64Response(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sendFileBase64Response(struct soap *soap, const char *tag, int id, const struct ns__sendFileBase64Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sendFileBase64Response), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sendFileBase64Response * SOAP_FMAC4 soap_get_ns__sendFileBase64Response(struct soap *soap, struct ns__sendFileBase64Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sendFileBase64Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__sendFileBase64Response * SOAP_FMAC4 soap_in_ns__sendFileBase64Response(struct soap *soap, const char *tag, struct ns__sendFileBase64Response *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sendFileBase64Response *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sendFileBase64Response, sizeof(struct ns__sendFileBase64Response), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__sendFileBase64Response(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sendFileBase64Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sendFileBase64Response, 0, sizeof(struct ns__sendFileBase64Response), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__sendFileBase64Response * SOAP_FMAC6 soap_new_ns__sendFileBase64Response(struct soap *soap, int n)
{	return soap_instantiate_ns__sendFileBase64Response(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__sendFileBase64Response(struct soap *soap, struct ns__sendFileBase64Response *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__sendFileBase64Response * SOAP_FMAC4 soap_instantiate_ns__sendFileBase64Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sendFileBase64Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sendFileBase64Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__sendFileBase64Response;
		if (size)
			*size = sizeof(struct ns__sendFileBase64Response);
	}
	else
	{	cp->ptr = (void*)new struct ns__sendFileBase64Response[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sendFileBase64Response);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sendFileBase64Response*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sendFileBase64Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sendFileBase64Response %p -> %p\n", q, p));
	*(struct ns__sendFileBase64Response*)p = *(struct ns__sendFileBase64Response*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__visitURL(struct soap *soap, struct ns__visitURL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__visitURL(struct soap *soap, const struct ns__visitURL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__visitURL(struct soap *soap, const struct ns__visitURL *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__visitURL);
	if (soap_out_ns__visitURL(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__visitURL(struct soap *soap, const char *tag, int id, const struct ns__visitURL *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__visitURL), type))
		return soap->error;
	if (soap_out_string(soap, "a", -1, &a->a, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__visitURL * SOAP_FMAC4 soap_get_ns__visitURL(struct soap *soap, struct ns__visitURL *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__visitURL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__visitURL * SOAP_FMAC4 soap_in_ns__visitURL(struct soap *soap, const char *tag, struct ns__visitURL *a, const char *type)
{
	short soap_flag_a = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__visitURL *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__visitURL, sizeof(struct ns__visitURL), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__visitURL(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_a && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "a", &a->a, "xsd:string"))
				{	soap_flag_a--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__visitURL *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__visitURL, 0, sizeof(struct ns__visitURL), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__visitURL * SOAP_FMAC6 soap_new_ns__visitURL(struct soap *soap, int n)
{	return soap_instantiate_ns__visitURL(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__visitURL(struct soap *soap, struct ns__visitURL *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__visitURL * SOAP_FMAC4 soap_instantiate_ns__visitURL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__visitURL(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__visitURL, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__visitURL;
		if (size)
			*size = sizeof(struct ns__visitURL);
	}
	else
	{	cp->ptr = (void*)new struct ns__visitURL[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__visitURL);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__visitURL*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__visitURL(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__visitURL %p -> %p\n", q, p));
	*(struct ns__visitURL*)p = *(struct ns__visitURL*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__visitURLResponse(struct soap *soap, struct ns__visitURLResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__visitURLResponse(struct soap *soap, const struct ns__visitURLResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__visitURLResponse(struct soap *soap, const struct ns__visitURLResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__visitURLResponse);
	if (soap_out_ns__visitURLResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__visitURLResponse(struct soap *soap, const char *tag, int id, const struct ns__visitURLResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__visitURLResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__visitURLResponse * SOAP_FMAC4 soap_get_ns__visitURLResponse(struct soap *soap, struct ns__visitURLResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__visitURLResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__visitURLResponse * SOAP_FMAC4 soap_in_ns__visitURLResponse(struct soap *soap, const char *tag, struct ns__visitURLResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__visitURLResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__visitURLResponse, sizeof(struct ns__visitURLResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__visitURLResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__visitURLResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__visitURLResponse, 0, sizeof(struct ns__visitURLResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__visitURLResponse * SOAP_FMAC6 soap_new_ns__visitURLResponse(struct soap *soap, int n)
{	return soap_instantiate_ns__visitURLResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__visitURLResponse(struct soap *soap, struct ns__visitURLResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__visitURLResponse * SOAP_FMAC4 soap_instantiate_ns__visitURLResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__visitURLResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__visitURLResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__visitURLResponse;
		if (size)
			*size = sizeof(struct ns__visitURLResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns__visitURLResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__visitURLResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__visitURLResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__visitURLResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__visitURLResponse %p -> %p\n", q, p));
	*(struct ns__visitURLResponse*)p = *(struct ns__visitURLResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ping(struct soap *soap, struct ns__ping *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ping(struct soap *soap, const struct ns__ping *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ping(struct soap *soap, const struct ns__ping *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__ping);
	if (soap_out_ns__ping(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ping(struct soap *soap, const char *tag, int id, const struct ns__ping *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ping), type))
		return soap->error;
	if (soap_out_string(soap, "a", -1, &a->a, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__ping * SOAP_FMAC4 soap_get_ns__ping(struct soap *soap, struct ns__ping *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ping(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__ping * SOAP_FMAC4 soap_in_ns__ping(struct soap *soap, const char *tag, struct ns__ping *a, const char *type)
{
	short soap_flag_a = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__ping *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ping, sizeof(struct ns__ping), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__ping(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_a && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "a", &a->a, "xsd:string"))
				{	soap_flag_a--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__ping *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ping, 0, sizeof(struct ns__ping), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__ping * SOAP_FMAC6 soap_new_ns__ping(struct soap *soap, int n)
{	return soap_instantiate_ns__ping(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__ping(struct soap *soap, struct ns__ping *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__ping * SOAP_FMAC4 soap_instantiate_ns__ping(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ping(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ping, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__ping;
		if (size)
			*size = sizeof(struct ns__ping);
	}
	else
	{	cp->ptr = (void*)new struct ns__ping[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__ping);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__ping*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ping(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__ping %p -> %p\n", q, p));
	*(struct ns__ping*)p = *(struct ns__ping*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pingResponse(struct soap *soap, struct ns__pingResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pingResponse(struct soap *soap, const struct ns__pingResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pingResponse(struct soap *soap, const struct ns__pingResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__pingResponse);
	if (soap_out_ns__pingResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pingResponse(struct soap *soap, const char *tag, int id, const struct ns__pingResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__pingResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__pingResponse * SOAP_FMAC4 soap_get_ns__pingResponse(struct soap *soap, struct ns__pingResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__pingResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__pingResponse * SOAP_FMAC4 soap_in_ns__pingResponse(struct soap *soap, const char *tag, struct ns__pingResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__pingResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__pingResponse, sizeof(struct ns__pingResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__pingResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__pingResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__pingResponse, 0, sizeof(struct ns__pingResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__pingResponse * SOAP_FMAC6 soap_new_ns__pingResponse(struct soap *soap, int n)
{	return soap_instantiate_ns__pingResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__pingResponse(struct soap *soap, struct ns__pingResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__pingResponse * SOAP_FMAC4 soap_instantiate_ns__pingResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__pingResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__pingResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__pingResponse;
		if (size)
			*size = sizeof(struct ns__pingResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns__pingResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__pingResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__pingResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pingResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__pingResponse %p -> %p\n", q, p));
	*(struct ns__pingResponse*)p = *(struct ns__pingResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__receiveEventsStruct(struct soap *soap, struct s2 *a)
{	soap_default_s2(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__receiveEventsStruct(struct soap *soap, struct s2 const*a)
{	soap_serialize_s2(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__receiveEventsStruct(struct soap *soap, const struct s2 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__receiveEventsStruct);
	if (soap_out_ns__receiveEventsStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__receiveEventsStruct(struct soap *soap, const char *tag, int id, const struct s2 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__receiveEventsStruct), type))
		return soap->error;
	if (soap_out_string(soap, "data", -1, &a->data, ""))
		return soap->error;
	if (soap_out_string(soap, "interEventDelimiter", -1, &a->interEventDelimiter, ""))
		return soap->error;
	if (soap_out_string(soap, "intraEventDelimiter", -1, &a->intraEventDelimiter, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "numEvents", -1, &a->numEvents, ""))
		return soap->error;
	if (soap_out_byte(soap, "moreEvents", -1, &a->moreEvents, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct s2 * SOAP_FMAC4 soap_get_ns__receiveEventsStruct(struct soap *soap, struct s2 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__receiveEventsStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct s2 * SOAP_FMAC4 soap_in_ns__receiveEventsStruct(struct soap *soap, const char *tag, struct s2 *a, const char *type)
{
	short soap_flag_data = 1, soap_flag_interEventDelimiter = 1, soap_flag_intraEventDelimiter = 1, soap_flag_numEvents = 1, soap_flag_moreEvents = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct s2 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__receiveEventsStruct, sizeof(struct s2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__receiveEventsStruct(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "data", &a->data, "xsd:string"))
				{	soap_flag_data--;
					continue;
				}
			if (soap_flag_interEventDelimiter && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "interEventDelimiter", &a->interEventDelimiter, "xsd:string"))
				{	soap_flag_interEventDelimiter--;
					continue;
				}
			if (soap_flag_intraEventDelimiter && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "intraEventDelimiter", &a->intraEventDelimiter, "xsd:string"))
				{	soap_flag_intraEventDelimiter--;
					continue;
				}
			if (soap_flag_numEvents && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "numEvents", &a->numEvents, "xsd:unsignedInt"))
				{	soap_flag_numEvents--;
					continue;
				}
			if (soap_flag_moreEvents && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_byte(soap, "moreEvents", &a->moreEvents, "xsd:byte"))
				{	soap_flag_moreEvents--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct s2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__receiveEventsStruct, 0, sizeof(struct s2), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numEvents > 0 || soap_flag_moreEvents > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct s2 * SOAP_FMAC6 soap_new_ns__receiveEventsStruct(struct soap *soap, int n)
{	return soap_instantiate_ns__receiveEventsStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__receiveEventsStruct(struct soap *soap, struct s2 *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct s2 * SOAP_FMAC4 soap_instantiate_ns__receiveEventsStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__receiveEventsStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__receiveEventsStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct s2;
		if (size)
			*size = sizeof(struct s2);
	}
	else
	{	cp->ptr = (void*)new struct s2[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct s2);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct s2*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__receiveEventsStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct s2 %p -> %p\n", q, p));
	*(struct s2*)p = *(struct s2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_s2(struct soap *soap, struct s2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->data);
	soap_default_string(soap, &a->interEventDelimiter);
	soap_default_string(soap, &a->intraEventDelimiter);
	soap_default_unsignedInt(soap, &a->numEvents);
	soap_default_byte(soap, &a->moreEvents);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_s2(struct soap *soap, const struct s2 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->data);
	soap_serialize_string(soap, &a->interEventDelimiter);
	soap_serialize_string(soap, &a->intraEventDelimiter);
	soap_embedded(soap, &a->moreEvents, SOAP_TYPE_byte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_s2(struct soap *soap, const struct s2 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_s2);
	if (soap_out_s2(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_s2(struct soap *soap, const char *tag, int id, const struct s2 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_s2), type))
		return soap->error;
	if (soap_out_string(soap, "data", -1, &a->data, ""))
		return soap->error;
	if (soap_out_string(soap, "interEventDelimiter", -1, &a->interEventDelimiter, ""))
		return soap->error;
	if (soap_out_string(soap, "intraEventDelimiter", -1, &a->intraEventDelimiter, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "numEvents", -1, &a->numEvents, ""))
		return soap->error;
	if (soap_out_byte(soap, "moreEvents", -1, &a->moreEvents, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct s2 * SOAP_FMAC4 soap_get_s2(struct soap *soap, struct s2 *p, const char *tag, const char *type)
{
	if ((p = soap_in_s2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct s2 * SOAP_FMAC4 soap_in_s2(struct soap *soap, const char *tag, struct s2 *a, const char *type)
{
	short soap_flag_data = 1, soap_flag_interEventDelimiter = 1, soap_flag_intraEventDelimiter = 1, soap_flag_numEvents = 1, soap_flag_moreEvents = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct s2 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_s2, sizeof(struct s2), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_s2(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "data", &a->data, "xsd:string"))
				{	soap_flag_data--;
					continue;
				}
			if (soap_flag_interEventDelimiter && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "interEventDelimiter", &a->interEventDelimiter, "xsd:string"))
				{	soap_flag_interEventDelimiter--;
					continue;
				}
			if (soap_flag_intraEventDelimiter && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "intraEventDelimiter", &a->intraEventDelimiter, "xsd:string"))
				{	soap_flag_intraEventDelimiter--;
					continue;
				}
			if (soap_flag_numEvents && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "numEvents", &a->numEvents, "xsd:unsignedInt"))
				{	soap_flag_numEvents--;
					continue;
				}
			if (soap_flag_moreEvents && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_byte(soap, "moreEvents", &a->moreEvents, "xsd:byte"))
				{	soap_flag_moreEvents--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct s2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_s2, 0, sizeof(struct s2), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numEvents > 0 || soap_flag_moreEvents > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct s2 * SOAP_FMAC6 soap_new_s2(struct soap *soap, int n)
{	return soap_instantiate_s2(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_s2(struct soap *soap, struct s2 *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct s2 * SOAP_FMAC4 soap_instantiate_s2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_s2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_s2, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct s2;
		if (size)
			*size = sizeof(struct s2);
	}
	else
	{	cp->ptr = (void*)new struct s2[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct s2);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct s2*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_s2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct s2 %p -> %p\n", q, p));
	*(struct s2*)p = *(struct s2*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__receiveFileStruct(struct soap *soap, struct s1 *a)
{	soap_default_s1(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__receiveFileStruct(struct soap *soap, struct s1 const*a)
{	soap_serialize_s1(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__receiveFileStruct(struct soap *soap, const struct s1 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__receiveFileStruct);
	if (soap_out_ns__receiveFileStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__receiveFileStruct(struct soap *soap, const char *tag, int id, const struct s1 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__receiveFileStruct), type))
		return soap->error;
	if (soap_out_string(soap, "data", -1, &a->data, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "encodedLength", -1, &a->encodedLength, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "decodedLength", -1, &a->decodedLength, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct s1 * SOAP_FMAC4 soap_get_ns__receiveFileStruct(struct soap *soap, struct s1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__receiveFileStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct s1 * SOAP_FMAC4 soap_in_ns__receiveFileStruct(struct soap *soap, const char *tag, struct s1 *a, const char *type)
{
	short soap_flag_data = 1, soap_flag_encodedLength = 1, soap_flag_decodedLength = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct s1 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__receiveFileStruct, sizeof(struct s1), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__receiveFileStruct(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "data", &a->data, "xsd:string"))
				{	soap_flag_data--;
					continue;
				}
			if (soap_flag_encodedLength && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "encodedLength", &a->encodedLength, "xsd:unsignedInt"))
				{	soap_flag_encodedLength--;
					continue;
				}
			if (soap_flag_decodedLength && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "decodedLength", &a->decodedLength, "xsd:unsignedInt"))
				{	soap_flag_decodedLength--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct s1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__receiveFileStruct, 0, sizeof(struct s1), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_encodedLength > 0 || soap_flag_decodedLength > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct s1 * SOAP_FMAC6 soap_new_ns__receiveFileStruct(struct soap *soap, int n)
{	return soap_instantiate_ns__receiveFileStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__receiveFileStruct(struct soap *soap, struct s1 *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct s1 * SOAP_FMAC4 soap_instantiate_ns__receiveFileStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__receiveFileStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__receiveFileStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct s1;
		if (size)
			*size = sizeof(struct s1);
	}
	else
	{	cp->ptr = (void*)new struct s1[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct s1);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct s1*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__receiveFileStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct s1 %p -> %p\n", q, p));
	*(struct s1*)p = *(struct s1*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_s1(struct soap *soap, struct s1 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->data);
	soap_default_unsignedInt(soap, &a->encodedLength);
	soap_default_unsignedInt(soap, &a->decodedLength);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_s1(struct soap *soap, const struct s1 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->data);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_s1(struct soap *soap, const struct s1 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_s1);
	if (soap_out_s1(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_s1(struct soap *soap, const char *tag, int id, const struct s1 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_s1), type))
		return soap->error;
	if (soap_out_string(soap, "data", -1, &a->data, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "encodedLength", -1, &a->encodedLength, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "decodedLength", -1, &a->decodedLength, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct s1 * SOAP_FMAC4 soap_get_s1(struct soap *soap, struct s1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_s1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct s1 * SOAP_FMAC4 soap_in_s1(struct soap *soap, const char *tag, struct s1 *a, const char *type)
{
	short soap_flag_data = 1, soap_flag_encodedLength = 1, soap_flag_decodedLength = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct s1 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_s1, sizeof(struct s1), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_s1(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "data", &a->data, "xsd:string"))
				{	soap_flag_data--;
					continue;
				}
			if (soap_flag_encodedLength && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "encodedLength", &a->encodedLength, "xsd:unsignedInt"))
				{	soap_flag_encodedLength--;
					continue;
				}
			if (soap_flag_decodedLength && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "decodedLength", &a->decodedLength, "xsd:unsignedInt"))
				{	soap_flag_decodedLength--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct s1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_s1, 0, sizeof(struct s1), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_encodedLength > 0 || soap_flag_decodedLength > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct s1 * SOAP_FMAC6 soap_new_s1(struct soap *soap, int n)
{	return soap_instantiate_s1(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_s1(struct soap *soap, struct s1 *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct s1 * SOAP_FMAC4 soap_instantiate_s1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_s1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_s1, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct s1;
		if (size)
			*size = sizeof(struct s1);
	}
	else
	{	cp->ptr = (void*)new struct s1[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct s1);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct s1*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_s1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct s1 %p -> %p\n", q, p));
	*(struct s1*)p = *(struct s1*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__procEvent_t(struct soap *soap, struct ns__procEvent *a)
{	soap_default_ns__procEvent(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__procEvent_t(struct soap *soap, struct ns__procEvent const*a)
{	soap_serialize_ns__procEvent(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__procEvent_t(struct soap *soap, const struct ns__procEvent *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__procEvent_t);
	if (soap_out_ns__procEvent_t(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__procEvent_t(struct soap *soap, const char *tag, int id, const struct ns__procEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__procEvent_t), type))
		return soap->error;
	if (soap_out_string(soap, "time", -1, &a->time, ""))
		return soap->error;
	if (soap_out_string(soap, "eventType", -1, &a->eventType, ""))
		return soap->error;
	if (soap_out_int(soap, "parentPID", -1, &a->parentPID, ""))
		return soap->error;
	if (soap_out_string(soap, "parentName", -1, &a->parentName, ""))
		return soap->error;
	if (soap_out_int(soap, "procPID", -1, &a->procPID, ""))
		return soap->error;
	if (soap_out_string(soap, "procName", -1, &a->procName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__procEvent * SOAP_FMAC4 soap_get_ns__procEvent_t(struct soap *soap, struct ns__procEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__procEvent_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__procEvent * SOAP_FMAC4 soap_in_ns__procEvent_t(struct soap *soap, const char *tag, struct ns__procEvent *a, const char *type)
{
	short soap_flag_time = 1, soap_flag_eventType = 1, soap_flag_parentPID = 1, soap_flag_parentName = 1, soap_flag_procPID = 1, soap_flag_procName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__procEvent *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__procEvent_t, sizeof(struct ns__procEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__procEvent_t(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "time", &a->time, "xsd:string"))
				{	soap_flag_time--;
					continue;
				}
			if (soap_flag_eventType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "eventType", &a->eventType, "xsd:string"))
				{	soap_flag_eventType--;
					continue;
				}
			if (soap_flag_parentPID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "parentPID", &a->parentPID, "xsd:int"))
				{	soap_flag_parentPID--;
					continue;
				}
			if (soap_flag_parentName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "parentName", &a->parentName, "xsd:string"))
				{	soap_flag_parentName--;
					continue;
				}
			if (soap_flag_procPID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "procPID", &a->procPID, "xsd:int"))
				{	soap_flag_procPID--;
					continue;
				}
			if (soap_flag_procName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "procName", &a->procName, "xsd:string"))
				{	soap_flag_procName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__procEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__procEvent_t, 0, sizeof(struct ns__procEvent), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_parentPID > 0 || soap_flag_procPID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__procEvent * SOAP_FMAC6 soap_new_ns__procEvent_t(struct soap *soap, int n)
{	return soap_instantiate_ns__procEvent_t(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__procEvent_t(struct soap *soap, struct ns__procEvent *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__procEvent * SOAP_FMAC4 soap_instantiate_ns__procEvent_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__procEvent_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__procEvent_t, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__procEvent;
		if (size)
			*size = sizeof(struct ns__procEvent);
	}
	else
	{	cp->ptr = (void*)new struct ns__procEvent[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__procEvent);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__procEvent*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__procEvent_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__procEvent %p -> %p\n", q, p));
	*(struct ns__procEvent*)p = *(struct ns__procEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__procEvent(struct soap *soap, struct ns__procEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->time);
	soap_default_string(soap, &a->eventType);
	soap_default_int(soap, &a->parentPID);
	soap_default_string(soap, &a->parentName);
	soap_default_int(soap, &a->procPID);
	soap_default_string(soap, &a->procName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__procEvent(struct soap *soap, const struct ns__procEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->time);
	soap_serialize_string(soap, &a->eventType);
	soap_serialize_string(soap, &a->parentName);
	soap_serialize_string(soap, &a->procName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__procEvent(struct soap *soap, const struct ns__procEvent *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__procEvent);
	if (soap_out_ns__procEvent(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__procEvent(struct soap *soap, const char *tag, int id, const struct ns__procEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__procEvent), type))
		return soap->error;
	if (soap_out_string(soap, "time", -1, &a->time, ""))
		return soap->error;
	if (soap_out_string(soap, "eventType", -1, &a->eventType, ""))
		return soap->error;
	if (soap_out_int(soap, "parentPID", -1, &a->parentPID, ""))
		return soap->error;
	if (soap_out_string(soap, "parentName", -1, &a->parentName, ""))
		return soap->error;
	if (soap_out_int(soap, "procPID", -1, &a->procPID, ""))
		return soap->error;
	if (soap_out_string(soap, "procName", -1, &a->procName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__procEvent * SOAP_FMAC4 soap_get_ns__procEvent(struct soap *soap, struct ns__procEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__procEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__procEvent * SOAP_FMAC4 soap_in_ns__procEvent(struct soap *soap, const char *tag, struct ns__procEvent *a, const char *type)
{
	short soap_flag_time = 1, soap_flag_eventType = 1, soap_flag_parentPID = 1, soap_flag_parentName = 1, soap_flag_procPID = 1, soap_flag_procName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__procEvent *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__procEvent, sizeof(struct ns__procEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__procEvent(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "time", &a->time, "xsd:string"))
				{	soap_flag_time--;
					continue;
				}
			if (soap_flag_eventType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "eventType", &a->eventType, "xsd:string"))
				{	soap_flag_eventType--;
					continue;
				}
			if (soap_flag_parentPID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "parentPID", &a->parentPID, "xsd:int"))
				{	soap_flag_parentPID--;
					continue;
				}
			if (soap_flag_parentName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "parentName", &a->parentName, "xsd:string"))
				{	soap_flag_parentName--;
					continue;
				}
			if (soap_flag_procPID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "procPID", &a->procPID, "xsd:int"))
				{	soap_flag_procPID--;
					continue;
				}
			if (soap_flag_procName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "procName", &a->procName, "xsd:string"))
				{	soap_flag_procName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__procEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__procEvent, 0, sizeof(struct ns__procEvent), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_parentPID > 0 || soap_flag_procPID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__procEvent * SOAP_FMAC6 soap_new_ns__procEvent(struct soap *soap, int n)
{	return soap_instantiate_ns__procEvent(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__procEvent(struct soap *soap, struct ns__procEvent *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__procEvent * SOAP_FMAC4 soap_instantiate_ns__procEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__procEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__procEvent, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__procEvent;
		if (size)
			*size = sizeof(struct ns__procEvent);
	}
	else
	{	cp->ptr = (void*)new struct ns__procEvent[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__procEvent);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__procEvent*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__procEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__procEvent %p -> %p\n", q, p));
	*(struct ns__procEvent*)p = *(struct ns__procEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__fileEvent(struct soap *soap, struct ns__fileEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->time);
	soap_default_string(soap, &a->eventType);
	soap_default_int(soap, &a->procPID);
	soap_default_string(soap, &a->procName);
	soap_default_string(soap, &a->fileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__fileEvent(struct soap *soap, const struct ns__fileEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->time);
	soap_serialize_string(soap, &a->eventType);
	soap_serialize_string(soap, &a->procName);
	soap_serialize_string(soap, &a->fileName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__fileEvent(struct soap *soap, const struct ns__fileEvent *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__fileEvent);
	if (soap_out_ns__fileEvent(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__fileEvent(struct soap *soap, const char *tag, int id, const struct ns__fileEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__fileEvent), type))
		return soap->error;
	if (soap_out_string(soap, "time", -1, &a->time, ""))
		return soap->error;
	if (soap_out_string(soap, "eventType", -1, &a->eventType, ""))
		return soap->error;
	if (soap_out_int(soap, "procPID", -1, &a->procPID, ""))
		return soap->error;
	if (soap_out_string(soap, "procName", -1, &a->procName, ""))
		return soap->error;
	if (soap_out_string(soap, "fileName", -1, &a->fileName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__fileEvent * SOAP_FMAC4 soap_get_ns__fileEvent(struct soap *soap, struct ns__fileEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__fileEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__fileEvent * SOAP_FMAC4 soap_in_ns__fileEvent(struct soap *soap, const char *tag, struct ns__fileEvent *a, const char *type)
{
	short soap_flag_time = 1, soap_flag_eventType = 1, soap_flag_procPID = 1, soap_flag_procName = 1, soap_flag_fileName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__fileEvent *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__fileEvent, sizeof(struct ns__fileEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__fileEvent(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "time", &a->time, "xsd:string"))
				{	soap_flag_time--;
					continue;
				}
			if (soap_flag_eventType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "eventType", &a->eventType, "xsd:string"))
				{	soap_flag_eventType--;
					continue;
				}
			if (soap_flag_procPID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "procPID", &a->procPID, "xsd:int"))
				{	soap_flag_procPID--;
					continue;
				}
			if (soap_flag_procName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "procName", &a->procName, "xsd:string"))
				{	soap_flag_procName--;
					continue;
				}
			if (soap_flag_fileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "fileName", &a->fileName, "xsd:string"))
				{	soap_flag_fileName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__fileEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__fileEvent, 0, sizeof(struct ns__fileEvent), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_procPID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__fileEvent * SOAP_FMAC6 soap_new_ns__fileEvent(struct soap *soap, int n)
{	return soap_instantiate_ns__fileEvent(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__fileEvent(struct soap *soap, struct ns__fileEvent *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__fileEvent * SOAP_FMAC4 soap_instantiate_ns__fileEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__fileEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__fileEvent, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__fileEvent;
		if (size)
			*size = sizeof(struct ns__fileEvent);
	}
	else
	{	cp->ptr = (void*)new struct ns__fileEvent[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__fileEvent);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__fileEvent*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__fileEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__fileEvent %p -> %p\n", q, p));
	*(struct ns__fileEvent*)p = *(struct ns__fileEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__regEvent(struct soap *soap, struct ns__regEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->time);
	soap_default_string(soap, &a->eventType);
	soap_default_int(soap, &a->procPID);
	soap_default_string(soap, &a->procName);
	soap_default_string(soap, &a->keyName);
	soap_default_string(soap, &a->valueName);
	soap_default_string(soap, &a->valueType);
	soap_default_string(soap, &a->valueData);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__regEvent(struct soap *soap, const struct ns__regEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->time);
	soap_serialize_string(soap, &a->eventType);
	soap_serialize_string(soap, &a->procName);
	soap_serialize_string(soap, &a->keyName);
	soap_serialize_string(soap, &a->valueName);
	soap_serialize_string(soap, &a->valueType);
	soap_serialize_string(soap, &a->valueData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__regEvent(struct soap *soap, const struct ns__regEvent *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__regEvent);
	if (soap_out_ns__regEvent(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__regEvent(struct soap *soap, const char *tag, int id, const struct ns__regEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__regEvent), type))
		return soap->error;
	if (soap_out_string(soap, "time", -1, &a->time, ""))
		return soap->error;
	if (soap_out_string(soap, "eventType", -1, &a->eventType, ""))
		return soap->error;
	if (soap_out_int(soap, "procPID", -1, &a->procPID, ""))
		return soap->error;
	if (soap_out_string(soap, "procName", -1, &a->procName, ""))
		return soap->error;
	if (soap_out_string(soap, "keyName", -1, &a->keyName, ""))
		return soap->error;
	if (soap_out_string(soap, "valueName", -1, &a->valueName, ""))
		return soap->error;
	if (soap_out_string(soap, "valueType", -1, &a->valueType, ""))
		return soap->error;
	if (soap_out_string(soap, "valueData", -1, &a->valueData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__regEvent * SOAP_FMAC4 soap_get_ns__regEvent(struct soap *soap, struct ns__regEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__regEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns__regEvent * SOAP_FMAC4 soap_in_ns__regEvent(struct soap *soap, const char *tag, struct ns__regEvent *a, const char *type)
{
	short soap_flag_time = 1, soap_flag_eventType = 1, soap_flag_procPID = 1, soap_flag_procName = 1, soap_flag_keyName = 1, soap_flag_valueName = 1, soap_flag_valueType = 1, soap_flag_valueData = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__regEvent *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__regEvent, sizeof(struct ns__regEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__regEvent(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "time", &a->time, "xsd:string"))
				{	soap_flag_time--;
					continue;
				}
			if (soap_flag_eventType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "eventType", &a->eventType, "xsd:string"))
				{	soap_flag_eventType--;
					continue;
				}
			if (soap_flag_procPID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "procPID", &a->procPID, "xsd:int"))
				{	soap_flag_procPID--;
					continue;
				}
			if (soap_flag_procName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "procName", &a->procName, "xsd:string"))
				{	soap_flag_procName--;
					continue;
				}
			if (soap_flag_keyName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "keyName", &a->keyName, "xsd:string"))
				{	soap_flag_keyName--;
					continue;
				}
			if (soap_flag_valueName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "valueName", &a->valueName, "xsd:string"))
				{	soap_flag_valueName--;
					continue;
				}
			if (soap_flag_valueType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "valueType", &a->valueType, "xsd:string"))
				{	soap_flag_valueType--;
					continue;
				}
			if (soap_flag_valueData && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "valueData", &a->valueData, "xsd:string"))
				{	soap_flag_valueData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__regEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__regEvent, 0, sizeof(struct ns__regEvent), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_procPID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns__regEvent * SOAP_FMAC6 soap_new_ns__regEvent(struct soap *soap, int n)
{	return soap_instantiate_ns__regEvent(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns__regEvent(struct soap *soap, struct ns__regEvent *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns__regEvent * SOAP_FMAC4 soap_instantiate_ns__regEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__regEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__regEvent, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns__regEvent;
		if (size)
			*size = sizeof(struct ns__regEvent);
	}
	else
	{	cp->ptr = (void*)new struct ns__regEvent[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__regEvent);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__regEvent*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__regEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__regEvent %p -> %p\n", q, p));
	*(struct ns__regEvent*)p = *(struct ns__regEvent*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostring);
	if (soap_out_PointerTostring(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of soapC.cpp */
